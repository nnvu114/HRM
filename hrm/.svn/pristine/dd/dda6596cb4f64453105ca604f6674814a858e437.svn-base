package com.minori.hrm.controllers;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.minori.hrm.constant.Constant;
import com.minori.hrm.constant.JsonResult;
import com.minori.hrm.models.EpmGroup;
import com.minori.hrm.request.GroupForm;
import com.minori.hrm.services.GroupService;
import com.minori.hrm.utils.CommonFunction;
import com.minori.hrm.validators.GroupValidator;

@RestController
@RequestMapping("/api")
public class GroupController extends AbStractController {
	
	@Autowired
	private GroupValidator groupValidator;
	
	@Autowired
	private GroupService groupService;

	/**
	 * Create a group
	 * @param groupForm
	 * @param bindingResult
	 * @return object
	 */
	@PostMapping(value ="/create-group")
	@PreAuthorize("hasAuthority('ROLE_ADMIN')")
	public JsonResult createGroup(@RequestBody GroupForm groupForm, BindingResult bindingResult){
		
		groupValidator.validate(groupForm, bindingResult);

		if (bindingResult.hasErrors()) {
			return toFailed(Constant.SPACE);
		}
		
		EpmGroup group = new EpmGroup();
		group.setName(groupForm.getName());
		group.setDescription(groupForm.getDescription());
		group.setCreatedBy(CommonFunction.getCurrentUser());
		return toSuccess(groupService.saveGroup(group));
	}
	
	/**
	 * Update a group
	 * @param groupForm
	 * @param bindingResult
	 * @return object
	 */
	@PutMapping(value ="/update-group/{groupId}")
	@PreAuthorize("hasAuthority('ROLE_ADMIN')")
	public JsonResult updateGroup(@PathVariable Integer groupId, @RequestBody GroupForm groupForm, BindingResult bindingResult){
		
		EpmGroup group = groupService.findOneGroup(groupId);
		
		if(group == null){
			return toFailed("");
		}
		
		groupValidator.validate(groupForm, bindingResult);

		if (bindingResult.hasErrors()) {
			return toFailed("");
		}
		
		group.setName(groupForm.getName());
		group.setDescription(groupForm.getDescription());
		group.setCreatedBy(CommonFunction.getCurrentUser());
		return toSuccess(groupService.saveGroup(group));
	}

}
