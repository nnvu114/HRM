/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.minori.hrm.models;

import java.io.Serializable;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

/**
 *
 * @author Admin
 */
@Entity
@Table(name = "master_deduction")
@NamedQueries({
    @NamedQuery(name = "MasterDeduction.findAll", query = "SELECT m FROM MasterDeduction m")})
public class MasterDeduction implements Serializable {

    private static final long serialVersionUID = 1L;
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    
    @Column(name = "deduction_master_id")
    private Integer deductionMasterId;
    
    @Column(name = "name")
    private String name;
    // @Max(value=?)  @Min(value=?)//if you know range of your decimal fields consider using these annotations to enforce field validation
    @Column(name = "percent_of_salary")
    private Float percentOfSalary;
    @Column(name = "amount")
    private Double amount;

    public MasterDeduction() {
    }

    public MasterDeduction(Integer deductionMasterId) {
        this.deductionMasterId = deductionMasterId;
    }

    public MasterDeduction(Integer deductionMasterId, String name) {
        this.deductionMasterId = deductionMasterId;
        this.name = name;
    }

    public Integer getDeductionMasterId() {
        return deductionMasterId;
    }

    public void setDeductionMasterId(Integer deductionMasterId) {
        this.deductionMasterId = deductionMasterId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Float getPercentOfSalary() {
        return percentOfSalary;
    }

    public void setPercentOfSalary(Float percentOfSalary) {
        this.percentOfSalary = percentOfSalary;
    }

    public Double getAmount() {
        return amount;
    }

    public void setAmount(Double amount) {
        this.amount = amount;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (deductionMasterId != null ? deductionMasterId.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof MasterDeduction)) {
            return false;
        }
        MasterDeduction other = (MasterDeduction) object;
        if ((this.deductionMasterId == null && other.deductionMasterId != null) || (this.deductionMasterId != null && !this.deductionMasterId.equals(other.deductionMasterId))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "hrm.MasterDeduction[ deductionMasterId=" + deductionMasterId + " ]";
    }
    
}
